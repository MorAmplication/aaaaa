/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePolicyApprovalArgs } from "./CreatePolicyApprovalArgs";
import { UpdatePolicyApprovalArgs } from "./UpdatePolicyApprovalArgs";
import { DeletePolicyApprovalArgs } from "./DeletePolicyApprovalArgs";
import { PolicyApprovalCountArgs } from "./PolicyApprovalCountArgs";
import { PolicyApprovalFindManyArgs } from "./PolicyApprovalFindManyArgs";
import { PolicyApprovalFindUniqueArgs } from "./PolicyApprovalFindUniqueArgs";
import { PolicyApproval } from "./PolicyApproval";
import { PolicyApprovalService } from "../policyApproval.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PolicyApproval)
export class PolicyApprovalResolverBase {
  constructor(
    protected readonly service: PolicyApprovalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "read",
    possession: "any",
  })
  async _policyApprovalsMeta(
    @graphql.Args() args: PolicyApprovalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PolicyApproval])
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "read",
    possession: "any",
  })
  async policyApprovals(
    @graphql.Args() args: PolicyApprovalFindManyArgs
  ): Promise<PolicyApproval[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PolicyApproval, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "read",
    possession: "own",
  })
  async policyApproval(
    @graphql.Args() args: PolicyApprovalFindUniqueArgs
  ): Promise<PolicyApproval | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PolicyApproval)
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "create",
    possession: "any",
  })
  async createPolicyApproval(
    @graphql.Args() args: CreatePolicyApprovalArgs
  ): Promise<PolicyApproval> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PolicyApproval)
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "update",
    possession: "any",
  })
  async updatePolicyApproval(
    @graphql.Args() args: UpdatePolicyApprovalArgs
  ): Promise<PolicyApproval | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PolicyApproval)
  @nestAccessControl.UseRoles({
    resource: "PolicyApproval",
    action: "delete",
    possession: "any",
  })
  async deletePolicyApproval(
    @graphql.Args() args: DeletePolicyApprovalArgs
  ): Promise<PolicyApproval | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
